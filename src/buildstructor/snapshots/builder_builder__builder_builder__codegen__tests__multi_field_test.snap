---
source: src/buildstructor/codegen.rs
expression: output
---
impl Foo {
    fn builder() -> __foo_builder::__FooBuilder<(__Required<usize>, __Required<usize>)> {
        __foo_builder::new()
    }
}
use __foo_builder::*;
mod __foo_builder {
    use super::*;
    pub fn new() -> __FooBuilder<(__Required<usize>, __Required<usize>)> {
        __FooBuilder {
            fields: (__required(), __required()),
            phantom: std::default::Default::default(),
        }
    }
    pub struct __Required<T> {
        phantom: std::marker::PhantomData<T>,
    }
    pub struct __Optional<T> {
        lazy: Option<T>,
    }
    pub struct __Set<T> {
        value: T,
    }
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            phantom: std::default::Default::default(),
        }
    }
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub struct __FooBuilder<__P> {
        fields: __P,
        phantom: (),
    }
    impl<__1> __FooBuilder<(__Required<usize>, __1)> {
        pub fn simple(self, simple: usize) -> __FooBuilder<(__Set<usize>, __1)> {
            __FooBuilder {
                fields: (__set(simple), self.fields.1),
                phantom: std::default::Default::default(),
            }
        }
    }
    impl<__0> __FooBuilder<(__0, __Required<usize>)> {
        pub fn simple2(self, simple2: usize) -> __FooBuilder<(__0, __Set<usize>)> {
            __FooBuilder {
                fields: (self.fields.0, __set(simple2)),
                phantom: std::default::Default::default(),
            }
        }
    }
    impl<__P0: Into<__Set<usize>>, __P1: Into<__Set<usize>>> __FooBuilder<(__P0, __P1)> {
        pub fn build(self) -> Foo {
            Foo::new(self.fields.0.into().value, self.fields.1.into().value)
        }
    }
}

