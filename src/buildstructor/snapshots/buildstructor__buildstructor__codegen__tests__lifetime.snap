---
source: src/buildstructor/codegen.rs
expression: output
---
impl<'a> Foo<'a> {
    #[must_use]
    fn builder() -> NewFooBuilder<'a> {
        __foo_new_builder::new()
    }
}
#[doc = "Autogenerated by buildstructor"]
#[allow(type_alias_bounds)]
type NewFooBuilder<'a> =
    __foo_new_builder::__FooBuilder<'a, (__foo_new_builder::__Required<&'a String>,)>;
mod __foo_new_builder {
    use super::*;
    #[inline(always)]
    #[must_use]
    pub(super) fn new<'a>() -> __FooBuilder<'a, (__foo_new_builder::__Required<&'a String>,)> {
        __FooBuilder {
            fields: (__required(),),
            _phantom: core::default::Default::default(),
        }
    }
    pub(super) struct __Required<T> {
        _uninit: std::mem::MaybeUninit<T>,
    }
    pub(super) struct __Optional<T> {
        lazy: Option<T>,
    }
    pub(super) struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _uninit: std::mem::MaybeUninit::uninit(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub(super) struct __FooBuilder<'a, __P> {
        fields: __P,
        _phantom: core::marker::PhantomData<(&'a ())>,
    }
    impl<'a> __FooBuilder<'a, (__Required<&'a String>,)> {
        #[inline(always)]
        #[must_use]
        pub(super) fn simple(self, simple: &'a String) -> __FooBuilder<'a, (__Set<&'a String>,)> {
            let simple = simple;
            __FooBuilder {
                fields: (__set(simple),),
                _phantom: core::default::Default::default(),
            }
        }
    }
    impl<'a, __P0: Into<__Set<&'a String>>> __FooBuilder<'a, (__P0,)> {
        #[inline(always)]
        pub(super) fn build(self) -> Foo<'a> {
            Foo::new(self.fields.0.into().value)
        }
    }
}
