---
source: src/buildstructor/codegen.rs
expression: output
---
impl Client {
    fn query_ref(&self) -> CallWithReturnRefClientBuilder {
        __client_call_with_return_ref_builder::new(self)
    }
}
#[doc = "Autogenerated by buildstructor"]
#[allow(type_alias_bounds)]
type CallWithReturnRefClientBuilder<'__a> = __client_call_with_return_ref_builder::__ClientBuilder<
    '__a,
    (__client_call_with_return_ref_builder::__Required<String>,),
>;
mod __client_call_with_return_ref_builder {
    use super::*;
    #[inline(always)]
    pub(super) fn new(
        receiver: &Client,
    ) -> __ClientBuilder<(__client_call_with_return_ref_builder::__Required<String>,)> {
        __ClientBuilder {
            receiver,
            fields: (__required(),),
            _phantom: core::default::Default::default(),
        }
    }
    pub(super) struct __Required<T> {
        _uninit: std::mem::MaybeUninit<T>,
    }
    pub(super) struct __Optional<T> {
        lazy: Option<T>,
    }
    pub(super) struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _uninit: std::mem::MaybeUninit::uninit(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub(super) struct __ClientBuilder<'__builder, __P> {
        receiver: &'__builder Client,
        fields: __P,
        _phantom: core::marker::PhantomData<()>,
    }
    impl<'__builder> __ClientBuilder<'__builder, (__Required<String>,)> {
        #[inline(always)]
        pub(super) fn simple<__T: Into<String>>(
            self,
            simple: __T,
        ) -> __ClientBuilder<'__builder, (__Set<String>,)> {
            let simple = simple.into();
            __ClientBuilder {
                receiver: self.receiver,
                fields: (__set(simple),),
                _phantom: core::default::Default::default(),
            }
        }
    }
    impl<'__builder, __P0: Into<__Set<String>>> __ClientBuilder<'__builder, (__P0,)> {
        #[inline(always)]
        pub(super) fn call(self) -> bool {
            self.receiver
                .call_with_return_ref(self.fields.0.into().value)
        }
    }
}

