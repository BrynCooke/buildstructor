---
source: src/buildstructor/codegen.rs
expression: output
---
impl<T: MyTrait> Foo<T> {
    pub fn builder() -> NewFooBuilder<T> {
        __foo_new_builder::new()
    }
}
///Autogenerated by buildstructor
#[allow(type_alias_bounds)]
pub type NewFooBuilder<T: MyTrait> = __foo_new_builder::__FooBuilder<
    (__foo_new_builder::__Required<T>, __foo_new_builder::__Required<T::Bar>),
    T,
>;
mod __foo_new_builder {
    use super::*;
    #[inline(always)]
    pub fn new<T: MyTrait>() -> __FooBuilder<
        (__foo_new_builder::__Required<T>, __foo_new_builder::__Required<T::Bar>),
        T,
    > {
        __FooBuilder {
            fields: (__required(), __required()),
            _phantom: core::default::Default::default(),
        }
    }
    pub struct __Required<T> {
        _uninit: std::mem::MaybeUninit<T>,
    }
    pub struct __Optional<T> {
        lazy: Option<T>,
    }
    pub struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _uninit: std::mem::MaybeUninit::uninit(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub struct __FooBuilder<__P, T> {
        fields: __P,
        _phantom: core::marker::PhantomData<(T)>,
    }
    impl<__1, T: MyTrait> __FooBuilder<(__Required<T>, __1), T> {
        #[inline(always)]
        pub fn foo(self, foo: T) -> __FooBuilder<(__Set<T>, __1), T> {
            let foo = foo;
            __FooBuilder {
                fields: (__set(foo), self.fields.1),
                _phantom: core::default::Default::default(),
            }
        }
    }
    impl<__0, T: MyTrait> __FooBuilder<(__0, __Required<T::Bar>), T> {
        #[inline(always)]
        pub fn bar<__T: Into<T::Bar>>(
            self,
            bar: __T,
        ) -> __FooBuilder<(__0, __Set<T::Bar>), T> {
            let bar = bar.into();
            __FooBuilder {
                fields: (self.fields.0, __set(bar)),
                _phantom: core::default::Default::default(),
            }
        }
    }
    impl<
        T: MyTrait,
        __P0: Into<__Set<T>>,
        __P1: Into<__Set<T::Bar>>,
    > __FooBuilder<(__P0, __P1), T> {
        #[inline(always)]
        pub fn build(self) -> Foo<T> {
            Foo::new(self.fields.0.into().value, self.fields.1.into().value)
        }
    }
}

