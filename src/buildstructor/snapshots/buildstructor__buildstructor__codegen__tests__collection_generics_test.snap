---
source: src/buildstructor/codegen.rs
expression: output
---
impl Foo {
    fn builder<K: Into<String> + Eq + Hash, V: Into<String>>() -> NewFooBuilder<K, V> {
        __foo_new_builder::new()
    }
}
type NewFooBuilder<K, V> = __foo_new_builder::__FooBuilder<
    (__foo_new_builder::__Optional<HashMap<K, V>>,),
    K,
    V,
>;
mod __foo_new_builder {
    use super::*;
    #[inline(always)]
    pub(super) fn new<K: Into<String> + Eq + Hash, V: Into<String>>() -> __FooBuilder<
            (__foo_new_builder::__Optional<HashMap<K, V>>,),
            K,
            V,
        > {
        __FooBuilder {
            fields: (__optional(),),
            _phantom: core::default::Default::default(),
        }
    }
    pub(super) struct __Required<T> {
        _phantom: std::marker::PhantomData<T>,
    }
    pub(super) struct __Optional<T> {
        lazy: Option<T>,
    }
    pub(super) struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _phantom: core::default::Default::default(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub(super) struct __FooBuilder<__P, K, V> {
        fields: __P,
        _phantom: core::marker::PhantomData<(K, V)>,
    }
    impl<
        K: Into<String> + Eq + Hash,
        V: Into<String>,
    > __FooBuilder<(__Optional<HashMap<K, V>>,), K, V> {
        #[inline(always)]
        pub(super) fn param(
            mut self,
            param: HashMap<K, V>,
        ) -> __FooBuilder<(__Optional<HashMap<K, V>>,), K, V> {
            self.fields
                .0
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(param.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn param_entry(
            mut self,
            key: K,
            value: V,
        ) -> __FooBuilder<(__Optional<HashMap<K, V>>,), K, V> {
            self.fields
                .0
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(key, value);
            self
        }
    }
    impl<
        K: Into<String> + Eq + Hash,
        V: Into<String>,
        __P0: Into<__Set<HashMap<K, V>>>,
    > __FooBuilder<(__P0,), K, V> {
        #[inline(always)]
        pub(super) fn build(self) -> Foo {
            Foo::new(self.fields.0.into().value)
        }
    }
}

