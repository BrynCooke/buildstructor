---
source: src/buildstructor/codegen.rs
expression: output
---
impl Collections {
    fn builder<K: Into<String> + Eq + Hash, V: Into<String>>() -> __collections_new_builder::__CollectionsBuilder<
            (
                __collections_new_builder::__Optional<HashMap<K, V>>,
                __collections_new_builder::__Optional<HashSet<K>>,
            ),
            K,
            V,
        > {
        __collections_new_builder::new()
    }
}
mod __collections_new_builder {
    use super::*;
    pub fn new<K: Into<String> + Eq + Hash, V: Into<String>>() -> __CollectionsBuilder<
            (
                __collections_new_builder::__Optional<HashMap<K, V>>,
                __collections_new_builder::__Optional<HashSet<K>>,
            ),
            K,
            V,
        > {
        __CollectionsBuilder {
            fields: (__optional(), __optional()),
            _phantom: core::default::Default::default(),
        }
    }
    pub struct __Required<T> {
        _phantom: std::marker::PhantomData<T>,
    }
    pub struct __Optional<T> {
        lazy: Option<T>,
    }
    pub struct __Set<T> {
        value: T,
    }
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _phantom: core::default::Default::default(),
        }
    }
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub struct __CollectionsBuilder<__P, K, V> {
        fields: __P,
        _phantom: (core::marker::PhantomData<K>, core::marker::PhantomData<V>),
    }
    impl<
        __1,
        K: Into<String> + Eq + Hash,
        V: Into<String>,
    > __CollectionsBuilder<(__Optional<HashMap<K, V>>, __1), K, V> {
        pub fn map(
            mut self,
            map: HashMap<K, V>,
        ) -> __CollectionsBuilder<(__Optional<HashMap<K, V>>, __1), K, V> {
            self.fields
                .0
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(map.into_iter());
            self
        }
        pub fn map_entry(
            mut self,
            key: K,
            value: V,
        ) -> __CollectionsBuilder<(__Optional<HashMap<K, V>>, __1), K, V> {
            self.fields
                .0
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(key, value);
            self
        }
    }
    impl<
        __0,
        K: Into<String> + Eq + Hash,
        V: Into<String>,
    > __CollectionsBuilder<(__0, __Optional<HashSet<K>>), K, V> {
        pub fn set(
            mut self,
            set: HashSet<K>,
        ) -> __CollectionsBuilder<(__0, __Optional<HashSet<K>>), K, V> {
            self.fields
                .1
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(set.into_iter());
            self
        }
        pub fn set_entry(
            mut self,
            value: K,
        ) -> __CollectionsBuilder<(__0, __Optional<HashSet<K>>), K, V> {
            self.fields
                .1
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(value);
            self
        }
    }
    impl<
        K: Into<String> + Eq + Hash,
        V: Into<String>,
        __P0: Into<__Set<HashMap<K, V>>>,
        __P1: Into<__Set<HashSet<K>>>,
    > __CollectionsBuilder<(__P0, __P1), K, V> {
        pub(super) fn build(self) -> Collections {
            Collections::new(self.fields.0.into().value, self.fields.1.into().value)
        }
    }
}

