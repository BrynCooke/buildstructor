---
source: src/buildstructor/codegen.rs
expression: output
---
impl Foo {
    fn builder() -> NewFooBuilder {
        __foo_new_builder::new()
    }
}
type NewFooBuilder = __foo_new_builder::__FooBuilder<
    (
        __foo_new_builder::__Required<usize>,
        __foo_new_builder::__Optional<HashSet<String>>,
        __foo_new_builder::__Optional<HashMap<String, String>>,
        __foo_new_builder::__Optional<Vec<String>>,
        __foo_new_builder::__Optional<BTreeMap<String, String>>,
        __foo_new_builder::__Optional<BTreeSet<String>>,
    ),
>;
mod __foo_new_builder {
    use super::*;
    #[inline(always)]
    pub(super) fn new() -> __FooBuilder<
            (
                __foo_new_builder::__Required<usize>,
                __foo_new_builder::__Optional<HashSet<String>>,
                __foo_new_builder::__Optional<HashMap<String, String>>,
                __foo_new_builder::__Optional<Vec<String>>,
                __foo_new_builder::__Optional<BTreeMap<String, String>>,
                __foo_new_builder::__Optional<BTreeSet<String>>,
            ),
        > {
        __FooBuilder {
            fields: (
                __required(),
                __optional(),
                __optional(),
                __optional(),
                __optional(),
                __optional(),
            ),
            _phantom: core::default::Default::default(),
        }
    }
    pub(super) struct __Required<T> {
        _phantom: std::marker::PhantomData<T>,
    }
    pub(super) struct __Optional<T> {
        lazy: Option<T>,
    }
    pub(super) struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _phantom: core::default::Default::default(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub(super) struct __FooBuilder<__P> {
        fields: __P,
        _phantom: core::marker::PhantomData<()>,
    }
    impl<
        __1,
        __2,
        __3,
        __4,
        __5,
    > __FooBuilder<(__Required<usize>, __1, __2, __3, __4, __5)> {
        #[inline(always)]
        pub(super) fn simple(
            self,
            simple: usize,
        ) -> __FooBuilder<(__Set<usize>, __1, __2, __3, __4, __5)> {
            let simple = simple;
            __FooBuilder {
                fields: (
                    __set(simple),
                    self.fields.1,
                    self.fields.2,
                    self.fields.3,
                    self.fields.4,
                    self.fields.5,
                ),
                _phantom: core::default::Default::default(),
            }
        }
    }
    impl<
        __0,
        __2,
        __3,
        __4,
        __5,
    > __FooBuilder<(__0, __Optional<HashSet<String>>, __2, __3, __4, __5)> {
        #[inline(always)]
        pub(super) fn set(
            mut self,
            set: HashSet<String>,
        ) -> __FooBuilder<(__0, __Optional<HashSet<String>>, __2, __3, __4, __5)> {
            self.fields
                .1
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(set.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn set_entry<__T: Into<String>>(
            mut self,
            value: __T,
        ) -> __FooBuilder<(__0, __Optional<HashSet<String>>, __2, __3, __4, __5)> {
            self.fields
                .1
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(value.into());
            self
        }
    }
    impl<
        __0,
        __1,
        __3,
        __4,
        __5,
    > __FooBuilder<(__0, __1, __Optional<HashMap<String, String>>, __3, __4, __5)> {
        #[inline(always)]
        pub(super) fn map(
            mut self,
            map: HashMap<String, String>,
        ) -> __FooBuilder<
                (__0, __1, __Optional<HashMap<String, String>>, __3, __4, __5),
            > {
            self.fields
                .2
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(map.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn map_entry<__K: Into<String>, __V: Into<String>>(
            mut self,
            key: __K,
            value: __V,
        ) -> __FooBuilder<
                (__0, __1, __Optional<HashMap<String, String>>, __3, __4, __5),
            > {
            self.fields
                .2
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(key.into(), value.into());
            self
        }
    }
    impl<
        __0,
        __1,
        __2,
        __4,
        __5,
    > __FooBuilder<(__0, __1, __2, __Optional<Vec<String>>, __4, __5)> {
        #[inline(always)]
        pub(super) fn vec(
            mut self,
            vec: Vec<String>,
        ) -> __FooBuilder<(__0, __1, __2, __Optional<Vec<String>>, __4, __5)> {
            self.fields
                .3
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(vec.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn vec_entry<__T: Into<String>>(
            mut self,
            value: __T,
        ) -> __FooBuilder<(__0, __1, __2, __Optional<Vec<String>>, __4, __5)> {
            self.fields
                .3
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .push(value.into());
            self
        }
    }
    impl<
        __0,
        __1,
        __2,
        __3,
        __5,
    > __FooBuilder<(__0, __1, __2, __3, __Optional<BTreeMap<String, String>>, __5)> {
        #[inline(always)]
        pub(super) fn btmap(
            mut self,
            btmap: BTreeMap<String, String>,
        ) -> __FooBuilder<
                (__0, __1, __2, __3, __Optional<BTreeMap<String, String>>, __5),
            > {
            self.fields
                .4
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(btmap.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn btmap_entry<__K: Into<String>, __V: Into<String>>(
            mut self,
            key: __K,
            value: __V,
        ) -> __FooBuilder<
                (__0, __1, __2, __3, __Optional<BTreeMap<String, String>>, __5),
            > {
            self.fields
                .4
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(key.into(), value.into());
            self
        }
    }
    impl<
        __0,
        __1,
        __2,
        __3,
        __4,
    > __FooBuilder<(__0, __1, __2, __3, __4, __Optional<BTreeSet<String>>)> {
        #[inline(always)]
        pub(super) fn btset(
            mut self,
            btset: BTreeSet<String>,
        ) -> __FooBuilder<(__0, __1, __2, __3, __4, __Optional<BTreeSet<String>>)> {
            self.fields
                .5
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .extend(btset.into_iter());
            self
        }
        #[inline(always)]
        pub(super) fn btset_entry<__T: Into<String>>(
            mut self,
            value: __T,
        ) -> __FooBuilder<(__0, __1, __2, __3, __4, __Optional<BTreeSet<String>>)> {
            self.fields
                .5
                .lazy
                .get_or_insert_with(|| core::default::Default::default())
                .insert(value.into());
            self
        }
    }
    impl<
        __P0: Into<__Set<usize>>,
        __P1: Into<__Set<HashSet<String>>>,
        __P2: Into<__Set<HashMap<String, String>>>,
        __P3: Into<__Set<Vec<String>>>,
        __P4: Into<__Set<BTreeMap<String, String>>>,
        __P5: Into<__Set<BTreeSet<String>>>,
    > __FooBuilder<(__P0, __P1, __P2, __P3, __P4, __P5)> {
        #[inline(always)]
        pub(super) fn build(self) -> Foo {
            Foo::new(
                self.fields.0.into().value,
                self.fields.1.into().value,
                self.fields.2.into().value,
                self.fields.3.into().value,
                self.fields.4.into().value,
                self.fields.5.into().value,
            )
        }
    }
}

