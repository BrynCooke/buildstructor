---
source: src/buildstructor/codegen.rs
expression: output
---
impl Client {
    fn builder(&self) -> NewClientBuilder {
        __client_new_builder::new(self)
    }
}
///Autogenerated by buildstructor
#[allow(type_alias_bounds)]
type NewClientBuilder<'__a> = __client_new_builder::__ClientBuilder<'__a, ()>;
mod __client_new_builder {
    use super::*;
    #[inline(always)]
    pub(super) fn new(receiver: &Client) -> __ClientBuilder<()> {
        __ClientBuilder {
            receiver,
            fields: (),
            _phantom: core::default::Default::default(),
        }
    }
    pub(super) struct __Required<T> {
        _uninit: std::mem::MaybeUninit<T>,
    }
    pub(super) struct __Optional<T> {
        lazy: Option<T>,
    }
    pub(super) struct __Set<T> {
        value: T,
    }
    #[inline(always)]
    fn __set<T>(value: T) -> __Set<T> {
        __Set { value }
    }
    #[inline(always)]
    fn __required<T>() -> __Required<T> {
        __Required::<T> {
            _uninit: std::mem::MaybeUninit::uninit(),
        }
    }
    #[inline(always)]
    fn __optional<T>() -> __Optional<T> {
        __Optional::<T> { lazy: None }
    }
    impl<T: Default> From<__Optional<T>> for __Set<T> {
        #[inline(always)]
        fn from(o: __Optional<T>) -> Self {
            __Set {
                value: o.lazy.unwrap_or_default(),
            }
        }
    }
    pub(super) struct __ClientBuilder<'__builder, __P> {
        receiver: &'__builder Client,
        fields: __P,
        _phantom: core::marker::PhantomData<()>,
    }
    impl<'__builder> __ClientBuilder<'__builder, ()> {
        #[inline(always)]
        pub(super) fn call(self) {
            self.receiver.new()
        }
    }
}

